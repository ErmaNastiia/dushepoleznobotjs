require('dotenv').config();
const {
  Bot,
  GrammyError,
  session,
  HttpError,
  InlineKeyboard,
} = require('grammy');
// const { freeStorage } = require('@grammyjs/storage-free');
const express = require('express');
const app = express();
const PORT = process.env.PORT || 8080;

// Initialize the bot
const bot = new Bot(process.env.BOT_API_KEY);

// Session setup for maintaining conversation state
bot.use(
  session({
    initial: () => ({
      step: 'idle',
      clientName: '',
      contactInfo: '',
      appointmentName: '',
      cabinet: '',
      date: '',
      startTime: '',
      timeSlot: '',
      customTime: '',
    }),
  })
);

bot.api.setMyCommands([
  { command: 'start', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.' },
  { command: 'info', description: '–†–∞—Å—Å–∫–∞–∂—É –æ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö' },
  { command: 'book', description: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ' },
]);

// Helper function to send Telegram notification to admin
async function sendTelegramNotification(sessionData) {
  const {
    clientName,
    contactInfo,
    appointmentName,
    cabinet,
    date,
    startTime,
    timeSlot,
    customTime,
  } = sessionData;

  let timeInfo;
  if (timeSlot === 'wholeDay') {
    timeInfo = '–í–µ—Å—å –¥–µ–Ω—å';
  } else if (timeSlot === 'custom') {
    timeInfo = `–í—Ä–µ–º—è: ${customTime}`;
  } else {
    let duration;
    if (timeSlot === '1hour') {
      duration = '1 —á–∞—Å';
    } else if (timeSlot === '1.5hours') {
      duration = '1.5 —á–∞—Å–∞';
    } else if (timeSlot === '2hours') {
      duration = '2 —á–∞—Å–∞';
    }

    timeInfo = `–ù–∞—á–∞–ª–æ: ${startTime}, –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}`;
  }

  const cabinetName = cabinet === 'cabinet13' ? '–ö–∞–±–∏–Ω–µ—Ç 13–º¬≤üî¥' : '–ó–∞–ª 17–º¬≤üîµ';

  const message = `
üîî *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã*

üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${clientName}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${contactInfo}
üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${appointmentName}
üè¢ *–ü–æ–º–µ—â–µ–Ω–∏–µ:* ${cabinetName}
üìÖ *–î–∞—Ç–∞:* ${date}
‚è∞ *–í—Ä–µ–º—è:* ${timeInfo}
  `;

  try {
    await bot.api.sendMessage(process.env.ADMIN_TELEGRAM_ID, message, {
      parse_mode: 'Markdown',
    });
    console.log('Admin notification sent successfully');
  } catch (error) {
    console.error('Error sending admin notification:', error);
  }
}

// Generate time selection keyboard (9:00 to 22:00)
function generateTimeKeyboard() {
  const keyboard = new InlineKeyboard();
  const hours = [];

  for (let i = 9; i <= 22; i++) {
    const hour = i.toString().padStart(2, '0') + ':00';
    hours.push({ text: hour, callback_data: hour });
  }

  // Create rows with 4 buttons each
  for (let i = 0; i < hours.length; i += 4) {
    const row = hours.slice(i, i + 4);
    keyboard.row();
    for (const hourBtn of row) {
      keyboard.text(hourBtn.text, hourBtn.callback_data);
    }
  }

  return keyboard;
}

// Start command
bot.command('book', async ctx => {
  ctx.session = {
    step: 'askName',
    clientName: '',
    contactInfo: '',
    appointmentName: '',
    cabinet: '',
    date: '',
    startTime: '',
    timeSlot: '',
    customTime: '',
  };

  await ctx.reply(
    '–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ <a href="https://dushepolezno.ru/prostranstvo-zapis">—Å—Å—ã–ª–∫–∞</a>. –°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É. –î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.',
    { parse_mode: 'HTML' }
  );
});

bot.command('start', async ctx => {
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã –ü—Ä–æ—Å—Ç—Ä–∞—Å—Ç–≤–∞. –ú—ã –æ—Ç–∫—Ä—ã—Ç—ã —Å 9 –¥–æ 22 –∏ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞–π <a href="https://dushepolezno.ru/prostranstvo">—Ç—É—Ç</a>. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ <a href="https://dushepolezno.ru/prostranstvo-zapis">—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</a>. –ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ –≤–≤–æ–¥–∏ /book –∏ –º—ã –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–¥—Ä–æ–±–Ω–µ–µ  –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –≤–≤–µ–¥–∏ /info',
    { parse_mode: 'HTML', disable_web_page_preview: false }
  );
});

bot.command('info', async ctx => {
  await ctx.react('üëå');
  await ctx.reply(
    '–í –Ω–∞—à–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –µ—Å—Ç—å –¥–≤–∞ –ø–æ–º–µ—â–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: –ö–∞–±–∏–Ω–µ—Ç 13 –º2 –∏ –ó–∞–ª 17 –º2. –ö–∞–±–∏–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≥—É–ø–ø–æ–≤—ã—Ö –ø–æ 5-6 —á–µ–ª–æ–≤–µ–∫, –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –∏ –¥–ª—è —Å—ä–µ–º–æ–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. –ó–∞–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–µ–∫—Ü–∏–π, –≤—ã—Å—Ç–∞–≤–æ–∫, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤, –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∫–∞–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∑–∞–ª –≤–º–µ—â–∞–µ—Ç –≤ —Å–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ 10-15 —á–µ–ª–æ–≤–µ–∫. –ü–æ–¥—Ä–æ–±–Ω–µ–µ <a href="https://dushepolezno.ru/prostranstvo">—Ç—É—Ç</a>. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ <a href="https://dushepolezno.ru/prostranstvo-zapis">—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</a>. –ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ –≤–≤–æ–¥–∏ /book –∏ –º—ã –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
    { parse_mode: 'HTML' }
  );
});

// Main conversation handler
bot.on('message', async ctx => {
  const { text } = ctx.message;
  const { step } = ctx.session;

  switch (step) {
    case 'askName':
      ctx.session.clientName = text;
      ctx.session.step = 'askContact';
      await ctx.reply(
        '–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –≤ —Ñ–æ—Ä–º–∞—Ç–µ qwerty@yandex.com –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7(900)1234567.'
      );
      break;

    case 'askContact':
      ctx.session.contactInfo = text;
      ctx.session.step = 'askAppointment';
      await ctx.reply(
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ —Ü–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.'
      );
      break;

    case 'askAppointment':
      ctx.session.appointmentName = text;
      ctx.session.step = 'chooseCabinet';

      const cabinetKeyboard = new InlineKeyboard()
        .text('–ö–∞–±–∏–Ω–µ—Ç (13–º¬≤)üî¥', 'cabinet13')
        .text('–ó–∞–ª (17–º¬≤)üîµ', 'hall17');

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—â–µ–Ω–∏–µ:', {
        reply_markup: cabinetKeyboard,
      });
      break;

    case 'askDate':
      // Validate date format (DD/MM/YYYY)
      const dateRegex = /^\d{2}\/\d{2}\/\d{4}$/;

      if (!dateRegex.test(text)) {
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î/–ú–ú/–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03/03/2025).'
        );
        break;
      }

      // Check if date is not in the past
      // Parse DD/MM/YYYY to a proper date object
      const [day, month, year] = text.split('/').map(Number);
      const selectedDate = new Date(year, month - 1, day); // Months are 0-indexed in JS
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      if (selectedDate < today) {
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.'
        );
        break;
      }

      ctx.session.date = text;
      ctx.session.step = 'chooseStartTime';

      // Show time selection keyboard
      const timeKeyboard = generateTimeKeyboard();
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Å 9:00 –¥–æ 22:00):', {
        reply_markup: timeKeyboard,
      });
      break;

    case 'askCustomTime':
      // Validate time format (HH:MM-HH:MM)
      const timeRegex = /^\d{2}:\d{2}-\d{2}:\d{2}$/;

      if (!timeRegex.test(text)) {
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-11:30).'
        );
        break;
      }

      ctx.session.customTime = text;
      ctx.session.timeSlot = 'custom';

      try {
        await sendTelegramNotification(ctx.session);
        await ctx.reply(
          '–°–ø–∞—Å–∏–±–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –Ω–∞—Å –æ—Ç–≤–µ—Ç–∞, –ø–∏—à–∏—Ç–µ –Ω–∞ @dushepolezno_work. –ü–æ–∫–∞ –∂–¥—ë—Ç–µ –æ—Ç –Ω–∞—Å –æ—Ç–≤–µ—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å —É—Å–ª–æ–≤–∏—è–º–∏ <a href="https://yadi.sk/i/vYDfeS16TEy9aQ">–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</a>',
          { parse_mode: 'HTML' }
        );
        ctx.session.step = 'idle'; // Reset the conversation
      } catch (error) {
        console.error('Error processing booking:', error);
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @dushepolezno_work.'
        );
      }
      break;

    default:
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
});

// Handle callbacks from inline keyboards
bot.on('callback_query', async ctx => {
  const callbackData = ctx.callbackQuery.data;

  switch (ctx.session.step) {
    case 'chooseCabinet':
      if (callbackData === 'cabinet13' || callbackData === 'hall17') {
        ctx.session.cabinet = callbackData;
        ctx.session.step = 'askDate';
        await ctx.answerCallbackQuery();
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î/–ú–ú/–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03/03/2025).'
        );
      }
      break;

    case 'chooseStartTime':
      // Handle time selection (format: "HH:MM")
      const timeRegex = /^\d{2}:\d{2}$/;

      if (timeRegex.test(callbackData)) {
        ctx.session.startTime = callbackData;
        ctx.session.step = 'chooseTimeSlot';

        const timeSlotKeyboard = new InlineKeyboard()
          .text('1 —á–∞—Å', '1hour')
          .text('1.5 —á–∞—Å–∞', '1.5hours')
          .row()
          .text('2 —á–∞—Å–∞', '2hours')
          .text('–í–µ—Å—å –¥–µ–Ω—å', 'wholeDay')
          .row()
          .text('–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è', 'customTime');

        await ctx.answerCallbackQuery();
        await ctx.reply(
          `–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${callbackData}. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:`,
          { reply_markup: timeSlotKeyboard }
        );
      }
      break;

    case 'chooseTimeSlot':
      await ctx.answerCallbackQuery();

      if (callbackData === 'customTime') {
        ctx.session.step = 'askCustomTime';
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-11:30).'
        );
      } else {
        ctx.session.timeSlot = callbackData;

        try {
          await sendTelegramNotification(ctx.session);
          await ctx.reply(
            '–°–ø–∞—Å–∏–±–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –Ω–∞—Å –æ—Ç–≤–µ—Ç–∞, –ø–∏—à–∏—Ç–µ –Ω–∞ @dushepolezno_work. –ü–æ–∫–∞ –∂–¥—ë—Ç–µ –æ—Ç –Ω–∞—Å –æ—Ç–≤–µ—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å —É—Å–ª–æ–≤–∏—è–º–∏ <a href="https://yadi.sk/i/vYDfeS16TEy9aQ">–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</a>',
            { parse_mode: 'HTML' }
          );
          ctx.session.step = 'idle'; // Reset the conversation
        } catch (error) {
          console.error('Error processing booking:', error);
          await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @dushepolezno_work.'
          );
        }
      }
      break;
  }
});

// Error handling
bot.catch(err => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error('Error in request:', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact TG:', e);
  } else {
    console.error('Unknown error', e);
  }
});

// Add a health check route for deployment platforms
app.get('/', (req, res) => {
  res.send('Bot is running');
});

// Start the Express server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

bot.start();
