class Storage {
    constructor(token, rootUrl = 'https://grammy-free-session.deno.dev/api') {
        this.token = token;
        this.rootUrl = rootUrl;
    }
    async login() {
        if (this.jwt === undefined) {
            const url = `${this.rootUrl}/login`;
            const body = JSON.stringify({ token: this.token });
            const response = await retryFetch(url, { method: 'POST', body });
            const res = await response.json();
            if ('token' in res || typeof res.token !== 'string') {
                throw new Error('Cannot use free session, invalid bot token!');
            }
            this.jwt = res.token;
        }
        return this.jwt;
    }
    logout() {
        this.jwt = undefined;
    }
    async call(method, key, body) {
        // perform request
        const url = `${this.rootUrl}/session/${key}`;
        const jwt = await this.login();
        const headers = { 'Authorization': `Bearer ${jwt}` };
        const response = await retryFetch(url, { method, body, headers });
        // handle response
        if (response.status === 401) {
            // token was revoked, must login again
            this.logout();
            return await this.call(method, key, body);
        }
        else if (response.status === 404) {
            // empty session
            return undefined;
        }
        else if (200 <= response.status && response.status < 300) {
            // success
            return method === 'GET' ? await response.text() : undefined;
        }
        else {
            // error
            const res = await response.json();
            if ('error' in res) {
                throw new Error(`${response.status}: ${res.error}`);
            }
            else {
                throw new Error(`${response.status}: ${res}`);
            }
        }
    }
}
/**
 * @param token The bot token of your bot.
 * @param opts Further configuration options
 * @returns An adapter to grammY's free session storage
 */
export function freeStorage(token, opts) {
    const storage = new Storage(token, opts === null || opts === void 0 ? void 0 : opts.rootUrl);
    if ((opts === null || opts === void 0 ? void 0 : opts.jwt) !== undefined)
        storage.jwt = opts.jwt;
    return {
        async read(key) {
            const session = await storage.call('GET', key);
            return session === undefined ? undefined : JSON.parse(session);
        },
        async write(key, data) {
            await storage.call('POST', key, JSON.stringify(data));
        },
        async delete(key) {
            await storage.call('DELETE', key);
        },
        /**
         * Returns the storage authentication token which is used to store the
         * session data. Only useful if you want to avoid the login call that will
         * be performed automatically when the storage adapter contacts its backend
         * for the first time. This can improve startup performance and is
         * especially useful in serverless environments.
         */
        async getToken() {
            return await storage.login();
        },
    };
}
async function retryFetch(...args) {
    let res;
    let delay = 10; // ms
    do {
        res = await fetch(...args);
        if (res.status >= 500) {
            console.error(`${res.status} in free session service, retrying!`);
            await sleep(delay);
            delay += delay; // exponential back-off
            delay = Math.min(delay, 1000 * 60 * 60); // cap at 1 hour
        }
    } while (res.status >= 500);
    return res;
}
async function sleep(ms) {
    await new Promise((r) => setTimeout(r, ms));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU87SUFFWixZQUNrQixLQUFhLEVBQ2IsVUFBVSwwQ0FBMEM7UUFEcEQsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQTZDO0lBQ25FLENBQUM7SUFFSixLQUFLLENBQUMsS0FBSztRQUNWLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUM1QixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLFFBQVEsQ0FBQztZQUNwQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNqRSxNQUFNLEdBQUcsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQVMsQ0FBQztZQUN6QyxJQUFJLE9BQU8sSUFBSSxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO2dCQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7WUFDaEUsQ0FBQztZQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNO1FBQ0wsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQ1QsTUFBaUMsRUFDakMsR0FBVyxFQUNYLElBQWE7UUFFYixrQkFBa0I7UUFD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